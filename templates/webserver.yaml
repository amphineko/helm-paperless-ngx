---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "webserver"
  labels:
    app.kubernetes.io/name: paperless-ngx
    app.kubernetes.io/component: webserver
spec:
  replicas: {{.Values.webserver.replicaCount}}
  strategy:
    type: {{.Values.webserver.strategyType}}
  selector:
    matchLabels:
      app.kubernetes.io/name: paperless-ngx
      app.kubernetes.io/component: webserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: paperless-ngx
        app.kubernetes.io/component: webserver
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z -v -w30 postgres 5432; do echo "Waiting for postgres connection..."; sleep 5; done;']
        - name: wait-for-redis
          image: busybox
          command: ['sh', '-c', 'until nc -z -v -w30 broker 6379; do echo "Waiting for redis connection..."; sleep 5; done;']
      containers:
        - name: webserver
          image: {{.Values.webserver.image}}
          env:
            - name: PAPERLESS_DBHOST
              value: "postgres"
            - name: PAPERLESS_FILENAME_FORMAT
              value: "{{ .Values.config.filename_format }}"
            - name: PAPERLESS_GOTENBERG_ENDPOINT
              value: "http://gotenberg:3000"
            - name: PAPERLESS_REDIS
              value: "redis://broker:6379"
            - name: PAPERLESS_TIKA_ENABLED
              value: "1"
            - name: PAPERLESS_TIKA_ENDPOINT
              value: "http://tika:9998"
            - name: PAPERLESS_URL
              value: "{{.Values.config.url}}"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: {{.Values.webserver.resources.limits.cpu}}
              memory: {{.Values.webserver.resources.limits.memory}}
            requests:
              cpu: {{.Values.webserver.resources.requests.cpu}}
              memory: {{.Values.webserver.resources.requests.memory}}
          volumeMounts:
            - name: storage
              mountPath: /usr/src/paperless/data
              subPath: data
            - name: storage
              mountPath: /usr/src/paperless/media
              subPath: media
      volumes:
        - name: storage
          {{- if .Values.storage.persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{.Values.storage.persistentVolumeClaim.name}}
          {{- else }}
          emptyDir: {}
          {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: "webserver"
  labels:
    app.kubernetes.io/name: paperless-ngx
    app.kubernetes.io/component: webserver
spec:
  type: ClusterIP
  ports:
    - port: {{.Values.webserver.service.port}}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: paperless-ngx
    app.kubernetes.io/component: webserver

---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "webserver"
  labels:
    app.kubernetes.io/name: paperless-ngx
    app.kubernetes.io/component: webserver
  annotations:
    {{- if .Values.ingress.annotations }}
    {{- toYaml .Values.ingress.annotations | nindent 4 }}
    {{- end }}
    {{- if .Values.ingress.extraAnnotations }}
    {{- toYaml .Values.ingress.extraAnnotations | nindent 4 }}
    {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- toYaml .Values.ingress.tls | nindent 4 }}
  {{- end }}
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: webserver
                port:
                  name: http
{{- end }}
